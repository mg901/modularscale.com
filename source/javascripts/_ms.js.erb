// Function settings
var modularscale = {
  base: 16,
  ratio: 1.5,
};

// Function
function ms(v,settings) {

  // Parse settings
  // Write initial settings if undefined
  if (settings === undefined) {
    settings = modularscale;
  }
  // Initiate values
  var base = settings.base;
  var ratio = settings.ratio;
  // Fill in the blanks with default values
  if (ratio === undefined) {
    ratio = modularscale.ratio;
  }
  if (base === undefined) {
    base = modularscale.base;
  }

  // Fast calc if not multi stranded
  if (!Array.isArray(base) || base.length === 1) {
    return (Math.pow(ratio,v) * base);
  }

  // Normalize bases
  // Find the upper bounds for base values
  var baseHigh = Math.pow(ratio,1) * base[0];
  for (var i = 1; i < base.length; i++) {
    // shift up if value too low
    while (base[i] < base[0]) {
      base[i] = Math.pow(ratio,1) * base[i];
    }
    // Shift down if too high
    while (base[i] >= baseHigh) {
      base[i] = Math.pow(ratio,-1) * base[i];
    }
  }
  // Sort bases
  base.sort();

  // Figure out what base to use with modulo
  var rBase = Math.round((v / base.length - Math.floor(v/base.length)) * base.length);

  // Return
  return Math.pow(ratio,Math.floor(v/base.length)) * base[rBase];
};